<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://874803372.github.io</id>
    <title>QLU_zsh | ACMer</title>
    <updated>2020-10-26T09:32:52.783Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://874803372.github.io"/>
    <link rel="self" href="https://874803372.github.io/atom.xml"/>
    <subtitle>有时候，正是那些意想不到之人，成就了无人能成之事。</subtitle>
    <logo>https://874803372.github.io/images/avatar.png</logo>
    <icon>https://874803372.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, QLU_zsh | ACMer</rights>
    <entry>
        <title type="html"><![CDATA[洛谷P2661 信息传递(拓扑排序删点+dfs求最小环)]]></title>
        <id>https://874803372.github.io/post/luo-gu-p2661-xin-xi-chuan-di-tuo-bu-pai-xu-shan-dian-dfs-qiu-zui-xiao-huan/</id>
        <link href="https://874803372.github.io/post/luo-gu-p2661-xin-xi-chuan-di-tuo-bu-pai-xu-shan-dian-dfs-qiu-zui-xiao-huan/">
        </link>
        <updated>2020-10-21T12:53:37.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>题目描述</li>
</ul>
<blockquote>
<p><strong>有个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>同学（编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>）正在玩一个信息传递的游戏。在游戏里每人都有一个固定的信息传递对象，其中，编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>的同学的信息传递对象是编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的同学。<br>
游戏开始时，每人都只知道自己的生日。之后每一轮中，所有人会同时将自己当前所知的生日信息告诉各自的信息传递对象（注意：可能有人可以从若干人那里获取信息， 但是每人只会把信息告诉一个人，即自己的信息传递对象）。当有人从别人口中得知自 己的生日时，游戏结束。请问该游戏一共可以进行几轮？</strong></p>
</blockquote>
<ul>
<li>输入格式</li>
</ul>
<blockquote>
<p><strong>共<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>行<br>
第一行包含一个整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，表示<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个人。<br>
第二行包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个用空格隔开的正整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>T</mi><mn>2</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>T</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">T_{1},T_{2},...,T_{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，其中第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>个整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>的同学的信息传递对象是编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">T_{i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的同学，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mo>≤</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">T_{i} \le n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>T</mi><mi>i</mi></msub><mi mathvariant="normal">≠</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">T_{i} \ne i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>。</strong></p>
</blockquote>
<ul>
<li>
<p>输出格式<br>
1个整数，表示游戏一共可以进行多少轮。</p>
</li>
<li>
<p>输入样例</p>
</li>
</ul>
<blockquote>
<p>5<br>
2 4 2 3 1</p>
</blockquote>
<ul>
<li>输出样例</li>
</ul>
<blockquote>
<p>3</p>
</blockquote>
<p>样例解释<br>
<img src="https://874803372.github.io/post-images/1603285558663.png" alt="" loading="lazy"></p>
<ul>
<li>思路</li>
</ul>
<blockquote>
<p><strong>把这题的图画出来就不难发现，如果游戏结束一定是因为图中有环，而且这个环是最小环。<br>
在最开始我只会一个用floyd求最小环，但这题的数据范围用<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>3</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(n^{3})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的floyd一定会超时，这题我又不太想用并查集去判环。<br>
于是就学习了一下拓扑排序+dfs求最小环的办法：<br>
1.首先我们和拓扑排序一样求出每个点的入度，并将所有入度为0的点标记删去，这样图中就只剩下在环内的点。<br>
2.然后我们用dfs求每个环的大小，同时标记已经走过的点。</strong></p>
</blockquote>
<ul>
<li>代码</li>
</ul>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdio&gt;

using namespace std;

const int N = 2e5 + 10;

int a[N];
int d[N];
int vis[N];
int n;
int ans = 1e9;

void clear(int i) {
	vis[i] = 1;
	d[a[i]]--;
	if(d[a[i]] == 0 &amp;&amp; vis[a[i]] != 1) {
		clear(a[i]);
	}
}

void dfs(int x,int l,int cnt) {
	if(x == l &amp;&amp; cnt &gt; 0) {
		ans = min(ans, cnt);
		return;
	}
	if(vis[a[x]] == 0) {
		vis[a[x]] = 1;
		dfs(a[x],l,cnt + 1);
	}
}

int main() {
	cin &gt;&gt; n;
	for(int i = 1;i &lt;= n;i++) {
		scanf(&quot;%d&quot;, &amp;a[i]);
		d[a[i]]++;
	}
	for(int i = 1;i &lt;= n;i++) {
		if(d[i] == 0 &amp;&amp; vis[i] != 1) {
			clear(i);
		}
	}
	for(int i = 1;i &lt;= n;i++) {
		if(d[i]) {
			dfs(i,i,0);
		}
	}
	cout &lt;&lt; ans &lt;&lt; endl;
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Codeforces Round #611 (Div. 3) C]]></title>
        <id>https://874803372.github.io/post/codeforces-round-611-div-3-c/</id>
        <link href="https://874803372.github.io/post/codeforces-round-611-div-3-c/">
        </link>
        <updated>2020-07-30T16:02:51.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>题意<br>
<strong>有n个人，n个人之间要互相送礼物，一个人最多只能送出一个礼物和收一个礼物。先输入多少人，然后第二行输入要送给第几个人，如果还没决定送给第几个人就输入0同时一个人不能送礼物给自己。</strong></li>
<li>样例解释<br>
不是多组输入<br>
<strong>Input</strong><br>
5<br>
5 0 0 2 4<br>
7<br>
7 4 0 3 0 5 1<br>
5<br>
2 1 0 0 0<br>
<strong>output</strong><br>
5 3 1 2 4<br>
7 4 2 3 6 5 1<br>
2 1 4 5 3<br>
<strong>对于第一个样例：第一个人送给了第五个，第四个人送给了第二个，第五个人送给了第四个，还剩第一个和第三个人没有收到礼物，第三个人送礼物不能送给自己所以只有5 3 1 2 4一个方案</strong></li>
<li>思路<br>
<strong>比较典型的构造题，其实样例不止上面三个，但这三个基本就可以代表这个题所有的类型<s>不得不让人感叹codeforces样例真的是对于调试程序很友好了不像某牛</s>。</strong><br>
<strong>我们会发现只有没送礼物也没收到礼物的人才有可能会送礼物给自己。第一个样例，第三个人没有收到礼物同时也没有决定送谁礼物，第二个人还没决定送谁礼物但已经收到礼物，所以第二个人必须送给第三个人礼物。</strong><br>
<strong>第一种情况：没送礼物也没收礼物的，和已经收到礼物但没送礼物的都有</strong><br>
<strong>第二种情况：所有人都已经收到礼物或者送出礼物，这种情况无所谓顺序因为没有人会自己送自己礼物了。</strong><br>
<strong>第三种情况：所有没送出礼物的人也没收到礼物</strong><br>
<strong>针对这三种情况进行构造即可,无论哪种情况我们先把没送礼物但收到礼物和没送礼物也没收礼物的人分别用vector统计一下，如果有已经收到礼物但没送礼物的，优先对没送礼物也没收到礼物的进行构造。详见代码注释。</strong></li>
</ul>
<pre><code>#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;vector&gt;

using namespace std;

const int N = 2e5 + 10;

struct Node {
    int id;
    bool vis;
}a[N];

vector&lt;int&gt; last;
vector&lt;int&gt; v;

int main() {
    int n;
    cin &gt;&gt; n;
    for(int i = 1;i &lt;= n;i++) {
        int x;
        scanf(&quot;%d&quot;, &amp;x);
        a[i].id = x;
        a[x].vis = true;
    }
    for(int i = 1;i &lt;= n;i++) {
        if(a[i].vis == 0) {
            if(a[i].id == 0) {
                v.push_back(i);//没送礼物也没收到礼物的人的编号
            }
            else {
                last.push_back(i);//已经收到礼物但没送礼物的人的编号
            }
        }
    }
    int len1 = last.size();
    if(len1 == 0) {//第三种情况只需要变下顺序即可和样例三一样，2 1 4 5 3
        int len = v.size();
        int temp = 1;
        for(int i = 1;i &lt;= n;i++) {
            if(a[i].id == 0) {
                if(temp == len) {
                    a[i].id = v[0];
                }
                else {
                    a[i].id = v[temp];
                    temp++;
                }
            }
            printf(&quot;%d &quot;,a[i].id);
        }
    }
    else {//第一种，第二种情况
        int len = v.size();
        for(int i = 0;i &lt; len;i++) {
            a[v[i]].id = last[len1 - 1];//已经收过礼物的，优先给没送也没收礼物的人送
            last.pop_back();
            last.push_back(v[i]);//没送也没收礼物的就变成了已经收到礼物的人了
        }
        int len2 = last.size();
        for(int i = 1;i &lt;= n;i++) {
            if(a[i].id == 0) {
                a[i].id = last[len2 - 1];
                last.pop_back();
                len2--;
            }
            printf(&quot;%d &quot;, a[i].id);
        }
    }
    return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>